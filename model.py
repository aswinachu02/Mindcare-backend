def ML_MODEL():
    # -*- coding: utf-8 -*-
    """S8Project.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
        https://colab.research.google.com/drive/1gw2erKmuMcOiiAQ_a1gjFzybipT8Pv2r
    """

    import pandas as pd
    import numpy as np
    import seaborn as sns
    import matplotlib.pyplot as plt
    import re
    import nltk

    # !pip install contractions

    # from contractions import contractions_dict
    import contractions

    from google.colab import drive

    drive.mount("/content/drive")

    df1 = pd.read_csv(
        "/content/drive/MyDrive/majorproject/Mental-Health-Twitter.csv", index_col=[0]
    )
    df2 = pd.read_csv(
        "/content/drive/MyDrive/majorproject/sentiment_tweets3.csv", index_col=[0]
    )

    df1.info

    df2.info

    df1 = df1.replace(r"^\/s*$.@!#%():;-_?<>", np.nan, regex=True)

    df2 = df2.replace(r"^\/s*$.@!#%():;-_?<>", np.nan, regex=True)

    df1.isnull().all()

    df2.isnull().all()

    df1 = df1[["post_text", "label"]]

    df1.head()

    df2.columns = ["post_text", "label"]
    df2.head

    fig = plt.figure(figsize=(15, 4))
    fig.subplots_adjust(hspace=0.3, wspace=0.3)

    # counts for df2
    ax1 = fig.add_subplot(1, 3, 2)
    sns.countplot(x="label", data=df1)
    ax1.set(title="label counts for df1")

    # counts for df3
    ax2 = fig.add_subplot(1, 3, 3)
    sns.countplot(x="label", data=df2)
    ax2.set(title="label counts for df2")

    df1["label"].value_counts()
    df2["label"].value_counts()

    X = df2.drop(["label"], axis=1)
    y = df2["label"]
    from imblearn.under_sampling import RandomUnderSampler

    rus = RandomUnderSampler(sampling_strategy="not minority")
    X_res, y_res = rus.fit_resample(X, y)

    # visualize proportion of labels after balancing
    ax = y_res.value_counts().plot.pie(autopct="%.2f")
    _ = ax.set_title("under-sampling")

    y_res.value_counts()

    df2 = pd.concat([X_res, y_res], axis="columns")

    # confirm successful concatenation
    df2.head()

    # confirm balanced data
    df2["label"].value_counts()

    df = pd.concat([df1, df2])
    df = df.replace(r"^\s*$./@!#%():;-_?//\\", np.nan, regex=True)
    df.post_text = df.post_text.str.replace("'", "o")

    import re

    url_re = re.compile(r"^https?://", re.IGNORECASE)

    def is_url(word):
        return url_re.search(word) is not None

    df.shape

    df["word_count"] = df["post_text"].apply(lambda x: len(str(x).split()))
    df.head()

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))

    dep_words = df[df["label"] == 1]["word_count"]
    ax1.hist(dep_words, color="#1c4966")
    ax1.set_title("depressed posts")

    non_dep_words = df[df["label"] == 0]["word_count"]
    ax2.hist(non_dep_words, color="#ff9d5c")
    ax2.set_title("non-depressed posts")

    fig.suptitle("number of words per post")
    plt.show()

    print(
        "The minimum number of words in non-depressed posts is: ", non_dep_words.min()
    )
    print(
        "The maximum number of words in non-depressed posts is: ", non_dep_words.max()
    )
    print("___________________________________________________________")
    print("The minimum number of words in depressed posts is: ", dep_words.min())
    print("The maximum number of words in non-depressed posts is: ", dep_words.max())
    print("___________________________________________________________")
    print(
        "The average number of words in non-depressed posts is: ",
        round(non_dep_words.mean()),
    )
    print(
        "The average number of words in depressed posts is: ", round(dep_words.mean())
    )

    from sklearn.model_selection import train_test_split

    # split into training and testing site with 20% of rows going to testing and 80% going to training
    # random state of 10 ensures reproducibility
    X_train1, X_test1, y_train, y_test = train_test_split(
        df["post_text"], df["label"], test_size=0.2, random_state=10
    )

    print(f"Number of training: {X_train1.shape[0]}")
    print(f"Number of testing: {X_test1.shape[0]}")

    def preprocess(text):

        # lowercase text
        text = text.lower()

        # strip all excess white space
        text = text.strip()
        from bs4 import BeautifulSoup

        # strip HTML tags
        text = BeautifulSoup(text, "html.parser").get_text(separator=" ")

        # remove retweets
        text = re.sub("rt @[\w_]+:", "", text)

        # remove hyperlinks
        text = re.sub(r"http\S+", "", text)

        # remove escape sequences
        text = re.sub(r"\n", "", text)

        # remove punctuations
        text = re.sub(r"[^A-Za-z0-9]+", " ", text)

        return text

    from nltk.corpus import stopwords
    from nltk.tokenize import word_tokenize

    nltk.download("stopwords")
    stop_words = set(stopwords.words("english"))

    # remove stopwords
    def remove_stopwords(text):
        word_tokens = word_tokenize(text)
        text_no_stop = [word for word in word_tokens if word not in stop_words]
        return text_no_stop

    from nltk.stem import WordNetLemmatizer

    # lemmatize
    def lemmatize_text(list_of_tokenized_words):
        lemmatizer = WordNetLemmatizer()
        lemmatized = [lemmatizer.lemmatize(token) for token in list_of_tokenized_words]
        return lemmatized

    def final_preprocess(text):
        return preprocess(remove_stopwords(lemmatize_text(text)))

    # pre-process training data
    X_train_clean = [preprocess(text) for text in X_train1]
    X_test_clean = [preprocess(text) for text in X_test1]
    X_test_clean

    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.feature_extraction.text import TfidfTransformer

    # transform text to feature vectors
    vectorizer = CountVectorizer()
    vectorizer = vectorizer.fit(X_train_clean)
    X_train = vectorizer.transform(X_train_clean)
    X_test = vectorizer.transform(X_test_clean)
    print(X_test.shape)

    # build dictionary of feature indices to link index value of word to its frequency in training corpus
    vectorizer.vocabulary_.get("algorithm")

    from sklearn.feature_extraction.text import TfidfVectorizer

    # fit estimator to data and calculate TF-IDF scores
    transformer = TfidfTransformer()
    transformer = transformer.fit(X_train)
    X_train_tfidf = transformer.transform(X_train)
    X_test_tfidf = transformer.transform(X_test)
    X_train_tfidf.shape

    from sklearn.naive_bayes import MultinomialNB

    # implement Multinomial Naive Bayes algorithm for classfication
    classifier = MultinomialNB().fit(X_train_tfidf, y_train)

    from sklearn.metrics import accuracy_score

    accuracy_score(y_test, classifier.predict(X_test_tfidf))
    # classifier.score(y_test, classifier.predict(X_test_tfidf))

    # from sklearn.pipeline import Pipeline
    from sklearn.pipeline import Pipeline, make_union
    from sklearn.preprocessing import FunctionTransformer

    # pipe = Pipeline([('preprocess',preprocess()),('rs',remove_stopwords()),("lemma",lemmatize_text()),('mn',final_preprocess()),('mod',MultinomialNB())])
    pipe = Pipeline(
        [
            (
                "union",
                make_union(
                    FunctionTransformer(preprocess),
                    FunctionTransformer(remove_stopwords),
                    FunctionTransformer(lemmatize_text),
                    FunctionTransformer(final_preprocess),
                ),
            ),
            ("transformer", TfidfTransformer()),
            ("multi", MultinomialNB()),
        ]
    )

    # !pip install transformers

    from transformers import AutoModelForSequenceClassification
    from transformers import TFAutoModelForSequenceClassification
    from transformers import AutoTokenizer
    import numpy as np
    from scipy.special import softmax
    import csv
    import urllib.request

    # Preprocess text (username and link placeholders)
    def preprocess(text):
        new_text = []

        for t in text.split(" "):
            t = "@user" if t.startswith("@") and len(t) > 1 else t
            t = "http" if t.startswith("http") else t
            new_text.append(t)
        return " ".join(new_text)

    # Tasks:
    # emoji, emotion, hate, irony, offensive, sentiment
    # stance/abortion, stance/atheism, stance/climate, stance/feminist, stance/hillary

    task = "sentiment"
    MODEL = f"cardiffnlp/twitter-roberta-base-{task}"

    tokenizer = AutoTokenizer.from_pretrained(MODEL)

    # download label mapping
    labels = []
    mapping_link = f"https://raw.githubusercontent.com/cardiffnlp/tweeteval/main/datasets/{task}/mapping.txt"
    with urllib.request.urlopen(mapping_link) as f:
        html = f.read().decode("utf-8").split("\n")
        csvreader = csv.reader(html, delimiter="\t")
    labels = [row[1] for row in csvreader if len(row) > 1]

    # PT
    model = AutoModelForSequenceClassification.from_pretrained(MODEL)
    model.save_pretrained(MODEL)

    text = "He is depressed"
    text = preprocess(text)
    encoded_input = tokenizer(text, return_tensors="pt")
    output = model(**encoded_input)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)

    # # TF
    # model = TFAutoModelForSequenceClassification.from_pretrained(MODEL)
    # model.save_pretrained(MODEL)

    # text = "He is"
    # encoded_input = tokenizer(text, return_tensors='tf')
    # output = model(encoded_input)
    # scores = output[0][0].numpy()
    # scores = softmax(scores)

    ranking = np.argsort(scores)
    ranking = ranking[::-1]
    for i in range(scores.shape[0]):
        l = labels[ranking[i]]
        s = scores[ranking[i]]
        print(f"{i+1}) {l} {np.round(float(s), 4)}")

    return "model.predict(input)"
